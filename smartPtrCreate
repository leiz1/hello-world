#include <map>
#include <string>
#include <memory>
#include <iostream>

using namespace std;

struct logic_t{

};

struct node_t
{
public:
	float			pos[3];
	float			scale;		//建议统一缩放
	float			rotate[3];
	std::string		name;
	logic_t			logic_data;
	std::weak_ptr<node_t>							parent_node;
	std::map<std::string, std::weak_ptr<node_t>>	child_nodes;
	~node_t()
	{
		std::cout << "~node_t" << this << " " << name << std::endl;
	}
};

class NodeFactory
{
	NodeFactory() {};
	~NodeFactory() {/**/ };

	std::vector< std::shared_ptr<node_t> > nodeManager;
	std::shared_ptr<node_t> root;

public:
	static NodeFactory* getInstance()
	{
		static NodeFactory instance;
		return &instance;
	}

	void Init()
	{
		root = std::make_shared<node_t>();
		root->name = "root";
	}

	void CreateNode(std::weak_ptr<node_t>& parent, std::string strName)
	{
		//add to node managet(shared ptr!)
		nodeManager.push_back(std::make_shared<node_t>());

		//set property
		std::weak_ptr<node_t> wpNode = nodeManager.back();
		auto spNode = wpNode.lock();
		spNode->name = strName;

		//set child
		bool bExpired = parent.expired();
		if (bExpired == false)
		{
			auto spParent = parent.lock();
			spParent->child_nodes[strName] = wpNode;
		}

		//set parent（ relative data ）
		spNode->parent_node = parent;
	}

	std::weak_ptr<node_t> GetRootNode()
	{
		std::weak_ptr<node_t> wpRootNode = root;
		return wpRootNode;
	}

};
